#include <WiFi.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "PubSubClient.h"
#include <ArduinoJson.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

// Configuración de la red WiFi
const char* ssid = "Wokwi-GUEST";
const char* password = "";

//token telegram
const char* telegramToken = "7043088073:AAGfb63Uae1k_n6b78JTPpUdCHVAT7zytVA";
#define CHAT_ID "-1002117470566" // ID del chat donde se quiere recibir las notificaciones

// Servidor MQTT
const char* mqttServer = "broker.emqx.io";
const int mqttPort = 1883;
const char* mqttUser = "redunida";
const char* mqttPassword = "redunida";

// Cliente MQTT
WiFiClient espClient;

PubSubClient client(espClient);

// Instancia del bot de Telegram
WiFiClientSecure secured_client;
UniversalTelegramBot bot(telegramToken, secured_client);



#define TELEGRAM_DEBUG 1
#define _debug

// Pantalla OLED
#define OLED_PIN 32
Adafruit_SSD1306 display(128, 64, &Wire, OLED_PIN);

// imagen inicio pantalla OLED
#define IMG_HEIGHT   128
#define IMG_WIDTH    64


const unsigned char PROGMEM welcomeBitmap[] = {


 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x3f, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x07, 0x9c, 0x1e, 0x70, 0x71, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0x07, 0x8c, 0x1e, 0x30, 0x71, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x1e, 0x10, 0x70, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x1e, 0x10, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x1e, 0x10, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x1f, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x1e, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8c, 0x1e, 0x00, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8c, 0x1e, 0x00, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8c, 0x1e, 0x00, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x88, 0x1e, 0x00, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x88, 0x1e, 0x00, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x88, 0x1e, 0x00, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x98, 0x1e, 0x00, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x98, 0x1e, 0x00, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x98, 0x1e, 0x00, 0x78, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x07, 0xb8, 0x1e, 0x00, 0x78, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x07, 0xbc, 0x1e, 0x00, 0x78, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x07, 0xdc, 0x1e, 0x00, 0x78, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x9f, 0x7f, 0xc1, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x9e, 0x1f, 0x40, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x1e, 0x10, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x0e, 0x10, 0x78, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x1f, 0x10, 0x78, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x87, 0x1e, 0x10, 0x78, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xcf, 0x3f, 0xf1, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x20, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc7, 0xe7, 0xc1, 0xe1, 0xf8, 0xff, 0x80, 0x1f, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc7, 0xc1, 0xe1, 0xf0, 0x79, 0xc0, 0x0f, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x81, 0xc1, 0xf0, 0x78, 0xc0, 0x0f, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0xa1, 0xc0, 0xf0, 0x78, 0xe0, 0x0f, 0x80, 
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0xa1, 0xc0, 0xf0, 0x78, 0xe0, 0x0f, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0xa1, 0xc0, 0xf0, 0x78, 0x60, 0x1e, 0x40, 
0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0xa1, 0xc0, 0xf0, 0x78, 0x60, 0x1e, 0x40, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x07, 0x83, 0xc3, 0x81, 0xc0, 0xf0, 0x78, 0x60, 0x1e, 0x40, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x81, 0xc0, 0xe0, 0x70, 0x70, 0x1e, 0x40, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x91, 0xc0, 0xe0, 0x78, 0x70, 0x1c, 0x40, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x91, 0xc0, 0xe0, 0x78, 0x70, 0x3c, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x91, 0xc1, 0xe0, 0x78, 0x70, 0x3c, 0x00, 
0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x91, 0xc0, 0xe0, 0x78, 0x70, 0x3c, 0x20, 
0x04, 0x00, 0x00, 0x20, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x81, 0xc0, 0xe0, 0x78, 0x70, 0x3c, 0x20, 
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x89, 0xc0, 0xe0, 0x78, 0x70, 0x78, 0x20, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x89, 0xc1, 0xe0, 0x78, 0x70, 0x78, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x89, 0xc0, 0xe0, 0x78, 0x60, 0x78, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x81, 0xc0, 0xe0, 0x78, 0x60, 0x78, 0x10, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x81, 0xc0, 0xe0, 0x78, 0x60, 0xf0, 0x10, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x85, 0xc0, 0xe0, 0x78, 0x60, 0xf0, 0x10, 
0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc7, 0xe7, 0xc7, 0xe1, 0xe1, 0xfe, 0x63, 0xf0, 0x10, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x83, 0xc3, 0x85, 0xc3, 0xf0, 0x78, 0x61, 0xff, 0xfc, 
0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0xc3, 0x83, 0x81, 0xc1, 0xe0, 0x78, 0x61, 0xe0, 0x08, 
0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0xc3, 0x03, 0x83, 0xc1, 0xe0, 0x78, 0x41, 0xe0, 0x08, 
0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x01, 0xc7, 0x03, 0x83, 0xc1, 0xe0, 0x78, 0xc1, 0xe0, 0x08, 
0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x01, 0xe7, 0x03, 0x83, 0xc1, 0xe0, 0x78, 0x83, 0xe0, 0x08, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x07, 0xc3, 0xf3, 0xf1, 0xff, 0x87, 0xe0, 0x3e, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Pin del sensor de movimiento, LED y buzzer
int sensorPin = 14;
int ledPin = 13;
int buzzerPin = 12;

void callback(char* topic, byte* payload, unsigned int length) {
  // Lógica para manejar los mensajes MQTT recibidos
  // Puedes agregar tu propia lógica aquí
}



void reconnect() {
  // Reconectar al servidor MQTT solo si no está conectado
  if (!client.connected()) {
    Serial.println("Conectando a MQTT...");
    if (client.connect("ESP32Client")) {
      Serial.println("Conectado a MQTT");
      client.subscribe("tu_topic"); // Reemplazar "tu_topic" por tu topico
    } else {
      Serial.print("Error al conectar a MQTT, rc=");
      Serial.print(client.state());
      Serial.println(" Intentando de nuevo en 5 segundos...");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(9600);
  Serial.println("Conectando a WiFi...");

  // Conexión a la red WiFi
  WiFi.begin(ssid, password);
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT); // Add root certificate for api.telegram.org
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando a WiFi...");
  }
  Serial.println("Conectado a WiFi");

   

  // Inicialización de la pantalla OLED
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();

  // Mostrar mensaje de bienvenida
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(20, 20);
  display.println("  Bienvenido a        RED UNIDA");
  display.display();
  delay(1000);

  // Mostrar imagen de bienvenida
  display.clearDisplay();
  display.drawBitmap(0, 0, welcomeBitmap,IMG_HEIGHT,IMG_WIDTH , WHITE);
  display.display();
  delay(3000); // Mostrar la imagen durante 3 segundos

// Mostrar mensaje entrada mqtt
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("Hola, MQTT!");
  display.display();

  // Configuración del cliente MQTT
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);

  // Configuración del pin del sensor de movimiento, LED y buzzer
  pinMode(sensorPin, INPUT);
  pinMode(ledPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  if (!client.connected()) {
    Serial.println("Conexión perdida con el servidor MQTT. Intentando reconectar...");
    reconnect();
  }

  // Lectura del sensor de movimiento
  int movimiento = digitalRead(sensorPin);

  // Control del LED en función del estado del sensor
  if (movimiento == HIGH) {
    digitalWrite(ledPin, HIGH); // Encender el LED
    digitalWrite(buzzerPin, HIGH); // Encender el buzzer
  } else {
    digitalWrite(ledPin, LOW); //Apagar el LED
    digitalWrite(buzzerPin, LOW); // Apagar el buzzer
  }

  // Publicar mensaje MQTT dependiendo del estado del sensor
if (movimiento == HIGH) {
  client.publish("tu_topic", "Movimiento detectado"); // Reemplazar "tu_topic" por tu tópico
} else {
  client.publish("tu_topic", "Sin movimiento"); // Reemplazar "tu_topic" por tu tópico
}

// Actualizar la pantalla OLED
display.clearDisplay();
display.setCursor(0, 0);
display.print("Sensor: ");

if (movimiento == HIGH) {
  display.println("ON");
  display.println("Hay movimiento");
} else {
  display.println("OFF");
  display.println("No hay movimiento");
}
display.clearDisplay();
display.display();

// Comprobación de detección de movimiento
if (movimiento == HIGH) { // Si se ha detectado movimiento...
   bot.sendMessage(CHAT_ID, "🚨 Movimiento Detectado 🚨", ""); // Envío de una notificación a Telegram
  Serial.println("🚨 Movimiento Detectado 🚨"); // Se muestra el mismo mensaje en la consola
}

// Delay para permitir que la pantalla se muestre
delay(200);
}